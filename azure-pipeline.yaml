name: Build and Deploy Python App
version: 1
trigger:
  - main

parameters:
- name: poolname
  type: string 
  default: 'TestAgentPool'

resources:
- repo: self

variables:
  imageRepo: 'pythonApp'
  tag: 'v1'

stages:

- stage: Build_And_Test_App
  displayName: 'BuilD and Test Python App'
  jobs:
  - job: RunUnitTests
    displayName: 'BuilD and Test'
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - script: |
        sudo apt install python3.10-venv   
        python3 -m venv venv
        source venv/bin/activate
        python3 -m pip install --upgrade pip
        pip install -r $(Build.SourcesDirectory)/code/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        python3 -m venv venv
        source venv/bin/activate
        pip install pytest
        python3 $(Build.SourcesDirectory)/tests/unit_test.py        
        sudo chmod 666 /var/run/docker.sock
      displayName: 'Unit Test'
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/test-results.xml'
      inputs:
        testResultsFiles: '**/test-results.xml'
        testRunTitle: 'Python App Results'

- stage: Build_And_Push_Image
  displayName: 'BuilD and Push Docker Image'
  jobs:
  - job: Build_Image
    displayName: Build_Image
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'svc_acr_cred'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/code/Dockerfile'
        tags: |
          $(Build.BuildId)
          $(tag)

- stage: Run_Image
  displayName: 'Run Image'
  dependsOn: Build_And_Push_Image
  jobs:
  - job: Run_Image
    displayName: Run_Image
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - script: |
        docker-compose down | true
        docker-compose up --build -d

- stage: Sonar_Scan
  dependsOn: Run_Image
 
  jobs:
  - job: Sonar_Scan
    displayName: Sonar_Scan
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonarcloud-conn'
        organization: 'shubham1708698304553'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'shubham1708698304553_implementation-2'
        cliProjectName: 'Implementation 2'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

- stage: Upload_Artifacts
  displayName: 'Upload Artifacts to Artifactory'
  dependsOn: Build_And_Push_Image
  jobs:
  - job: UploadArtifacts
    displayName: Upload Artifacts to JFrog
    pool:
      name: ${{ parameters.poolname }}  
    steps:
    - script: |
        # Install JFrog CLI
        curl -fL https://getcli.jfrog.io | sh
        sudo cp jfrog /usr/local//bin
      displayName: 'Install JFrog CLI'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: k8s_code

    # - script: |
    #     # Configure JFrog CLI with Artifactory server details
    #     sudo jfrog rt config --url=https://stackroute.jfrog.io/artifactory --user=trialadmin --password=Reset123
    #   displayName: 'Configure JFrog CLI'

    # - script: |
    #     # Publish manifest file to Artifactory
    #     sudo jfrog rt upload /tmp/myagent/_work/1/s/code/*.yml k8s-yaml-generic-local/k8s-manifects/
    #   displayName: 'Publish Manifest File to Artifactory'

